generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// This collection uses a JSON Schema defined in the database, which requires additional setup for migrations. Visit https://pris.ly/d/mongodb-json-schema for more info.
model account {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  firstName String
  lastName  String
  password  String
  roles     RoleEnum[] @default([User])
  clients   client[]
}

model client {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  account_id String   @db.ObjectId
  account    account? @relation(fields: [account_id], references: [id])
  credits    Int
  name       String
  events     event[]
}

model event {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  client_id        String          @db.ObjectId
  client           client          @relation(fields: [client_id], references: [id])
  name             String
  start_on         DateTime
  end_on           DateTime?
  created_on       DateTime
  last_race_number Int
  event_type       EventTypeEnum[]
  races            races[]
  participant      participant[]
  iot              iot[]
}

model races {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  event_id  String       @db.ObjectId
  name      String
  race_type RaceTypeEnum
  batches   batch[]
  rounds    round[]
  event     event        @relation(fields: [event_id], references: [id])
  iot       iot[]
}

model iot {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  event_id      String? @db.ObjectId
  event         event?  @relation(fields: [event_id], references: [id])
  race_id       String? @db.ObjectId
  race          races?  @relation(fields: [race_id], references: [id])
  round_index   Int?
  heat_index   Int?
  participant_a String?
  participant_b String?
  start_on      DateTime?
}

type round {
  name                String
  round_index         Int
  is_qualifier        Boolean
  heats               heat[]
  all_participant_ids String[]
}

type heat {
  index        Int
  participants heat_participant[]
  start_time   DateTime?
  is_closed    Boolean
}

type heat_participant {
  index          Int
  participant_id String                     @db.ObjectId
  name           String
  status         ParticipantHeatStatusEnum?
  end_time       DateTime?
  total_time_ms  String?
}

enum ParticipantHeatStatusEnum {
  NotStarted
  Winner
  RunnerUp
  Disqualified
  DidNotFinish
}

model participant {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  first_name  String
  last_name   String
  birthdate   DateTime
  race_number String?
  races       participant_race[]
  is_male     Boolean
  event_id    String             @db.ObjectId
  event       event              @relation(fields: [event_id], references: [id])
}

type participant_race {
  race_id     String
  race_type   RaceTypeEnum
  race_name   String
  batch_index Int?
}

type participant_batch {
  participant_id String
  finish_time    DateTime?
  finish_status  FinishStatusEnum?
  time_taken     String?
  time_taken_ms  Int?
}

type batch {
  index        Int
  name         String
  start_on     DateTime?
  participants participant_batch[]
}

enum RaceTypeEnum {
  StandardNoLaps
  LaneRace
}

enum EventTypeEnum {
  ObstacleCourseRace
  TimeTrial
  Race
  SprintRace
  LaneRace
  Marathon
  Ultra
  Trail
}

enum RoleEnum {
  Admin
  User
}

enum FinishStatusEnum {
  Finished
  DNF
  DNS
  DQ
}
